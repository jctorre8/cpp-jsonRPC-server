package ser321.assign5;

import ser321.*;
import javax.swing.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import javax.swing.event.*;
import javax.swing.text.html.*;
import java.awt.event.*;
import java.awt.*;
import java.util.*;
import java.text.NumberFormat;
import java.net.HttpURLConnection;
import java.net.URL;

/**
 * Copyright (c) 2018 Tim Lindquist,
 * Software Engineering,
 * Arizona State University at the Polytechnic campus
 * <p/>
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation version 2
 * of the License.
 * <p/>
 * This program is distributed in the hope that it will be useful,
 * but without any warranty or fitness for a particular purpose.
 * <p/>
 * Please review the GNU General Public License at:
 * http://www.gnu.org/licenses/gpl-2.0.html
 * see also: https://www.gnu.org/licenses/gpl-faq.html
 * so you are aware of the terms and your rights with regard to this software.
 * Or, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,USA
 * <p/>
 * Purpose: Java client UI for Waypoint management.
 * This class creates Gui components for a UI to manage waypoints.
 * This software is meant to run on OSX, and Windows Cygwin using g++.
 * SampleAssign2 demonstrates use of the WaypointGUI class
 * for solving ser321 assignments.
 * WaypointGUI class uses Swing components JTextField, JComboBox, and
 * JTextArea to realize a GUI for Waypoint management. 
 * <p/>
 * Ser321 Principles of Distributed Software Systems.
 * see http://pooh.poly.asu.edu/Ser321
 * @author Tim Lindquist (Tim.Lindquist@asu.edu) CIDSE - Software Engineering
 *                       Ira Fulton Schools of Engineering, ASU Polytechnic
 * @file    WaypointGUI.java
 * @date    January, 2018
 * @license See above
 */
public class WaypointClient extends WaypointGUI implements
                                               ActionListener, ItemListener {

   private static final boolean debugOn = true;
   private WaypointLibraryHttpProxy waypoints;

   public WaypointClient(String base, String url) {
      super(base);
      removeWPButt.addActionListener(this);
      addWPButt.addActionListener(this);
      modWPButt.addActionListener(this);
      importButt.addActionListener(this);
      exportButt.addActionListener(this);
      distBearButt.addActionListener(this);
      frWps.addItemListener(this);
      toWps.addItemListener(this);

      this.addWindowListener(new WindowAdapter() {
         @Override
         public void windowClosing(WindowEvent e) {
            debug("you clicked X");
            System.exit(0);
         }
      });
      NumberFormat nf = NumberFormat.getInstance();
      nf.setMaximumFractionDigits(2);
      try{
         System.out.println("Opening connection to: "+url);
         this.waypoints = new WaypointLibraryHttpProxy(new URL(url));
      }catch (Exception e) {
         e.printStackTrace();
         System.out.println("Oops, you didn't enter the right stuff");
      }
      
      String[] names = waypoints.getNames();
      for(int i = 0; i < names.length; i ++){
        frWps.addItem(names[i]);
        toWps.addItem(names[i]);
      }

      setVisible(true);

   }

   public void itemStateChanged(ItemEvent event){
      if(event.getStateChange() == ItemEvent.SELECTED){
         Object comp = event.getSource();
         nameIn.setText(waypoints.get((String)event.getItem()).getName());
         latIn.setText(Double.toString(waypoints.get((String)event.getItem()).getLatitude()));
         lonIn.setText(Double.toString(waypoints.get((String)event.getItem()).getLongitude()));
         eleIn.setText(Double.toString(waypoints.get((String)event.getItem()).getElevation()));
         addrIn.setText(waypoints.get((String)event.getItem()).getAddress());
         debug("Selection event generated by "+
                            ((comp==frWps)?"from ":"to ")+"combobox. "+
                            "Selected waypoint is: "+(String)event.getItem());
      }
   }

   public void actionPerformed(ActionEvent e) {
      if(e.getActionCommand().equals("Remove")) {
         debug("you clicked Remove Waypoint " + ((String)frWps.getSelectedItem()));
         waypoints.remove((String)frWps.getSelectedItem());
         toWps.removeItem(frWps.getSelectedItem());
         frWps.removeItem(frWps.getSelectedItem());
      }else if(e.getActionCommand().equals("Add")) {
         debug("you clicked Add Waypoint");
         waypoints.addNew(latIn.getText(), lonIn.getText(), 
          eleIn.getText(), nameIn.getText(), addrIn.getText());
         frWps.addItem(nameIn.getText());
         toWps.addItem(nameIn.getText());
         distBearIn.setText("Added: "+nameIn.getText());
      }else if(e.getActionCommand().equals("Modify")) {
         waypoints.get((String)frWps.getSelectedItem()).setName(nameIn.getText());
         waypoints.get((String)frWps.getSelectedItem()).setLatitude(Double.parseDouble(latIn.getText()));
         waypoints.get((String)frWps.getSelectedItem()).setLongitude(Double.parseDouble(lonIn.getText()));
         waypoints.get((String)frWps.getSelectedItem()).setElevation(Double.parseDouble(latIn.getText()));
         waypoints.get((String)frWps.getSelectedItem()).setAddress(addrIn.getText());
         debug("you clicked Modify Waypoint");
      }else if(e.getActionCommand().equals("Import")) {
         debug("you clicked Import Json Library");
         waypoints.restoreFromFile();
      }else if(e.getActionCommand().equals("Export")) {
         debug("you clicked Export Json Library");
         this.waypoints.saveToFile();
      }else if(e.getActionCommand().equals("Distance")) {
         distBearIn.setText(Double.toString(waypoints.get((String)frWps.getSelectedItem()).distanceGCTo(waypoints.get((String)toWps.getSelectedItem()),2)) + "/" + Double.toString(waypoints.get((String)frWps.getSelectedItem()).bearingGCInitTo(waypoints.get((String)toWps.getSelectedItem()),2)));
         debug("you clicked Distance and Bearing");
      }
   }


   private void debug(String message) {
      if (debugOn)
         System.out.println("debug: "+message);
   }

   public static void main(String args[]) {
      String host = "localhost";
      String port = "8080";
      String name = "Ser321";
      
      try {
         if(args.length >= 2){
            host = args[0];
            port = args[1];
         }
         String url = "http://"+host+":"+port+"/";         
         WaypointClient sa2 = new WaypointClient(name, url);
      }catch (Exception ex){
         ex.printStackTrace();
      }
   }
}
